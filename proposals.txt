fees:
Select timestamp of the (current block -50) from the ledger
Calculate how much time has passed since that timestamp, the longer, the lower the transaction
Fee =1/(timestamp_current - timestamp_50)
Fee is added to the ledger as an extra column, verified by every node's mempool

constant = 1

current time: 12:30
time before 50 txs: 12:15
1/0,25(h) = 4 fee

current time: 12:30
time before 50 txs: 11:30
1/1(h) = 1 fee

---
confirmation proposal:

confirms are kept in a separate table/db, each client have their own, each txhash confirmation from any client adds one conf
EASIER: use transaction age instead of confirmation = only roll back if the previous transaction is not older than xy AND number of rollbacks condition?
---

mining proposal:

if there is no block mined in previous 100 blocks:
if your address hash matches one in the previous 100 block hashes partially
mine -> your address (extra column)

mining could be limited to the fees paid (burned)
--

dapp proposal:

easiest way is though a separate column/db, with binaries encoded as base64
each dapp will have a limited life span, paid by block

--
Proposal for dev rewards:
-Fetch total amount of blocks
-Fetch total amount of rewards (effectively exclude block chunks without reward)
-Calculate rewards/total blocks
-Dev address = (rewards/total blocks)-expenditures
