#icons created using http://www.winterdrache.de/freeware/png2ico/

import PIL.Image
import PIL.ImageTk

import pyqrcode
import os
from datetime import datetime
import hashlib
import sqlite3
import socket
import time
import base64
import logging
from logging.handlers import RotatingFileHandler

from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA

from Tkinter import *

root = Tk()

root.wm_title("Bismuth")

if "posix" not in os.name:
    #icon
    icon_hash = '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H+wuJSXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRkAABkZJyQu7u7kG+5kMGQTU1NTU1NTU1NTeyQLsDAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACzZLMAALNknJC5kMGQTZDBwWSzAABkZMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJCcZMDAwMDAwMCckAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////wAP/////////////////8AAAD////////////////gAAAAB///////////////AAAAAAD/////////////+AAAAAAAH////////////+AAAAAAAAf///////////8AAAAAAAAB///////////+AAAAAAAAAH//////////+AAAAAAAAAAf/////////+AAAAAAAAAAB/////////+AAAAAAAAAAAH/////////AAAAAAAAAAAA/////////AAAAAAAAAAAAD////////gAAAAAAAAAAAAf///////wAAAAAAAAAAAAD///////4AAAAAAAAAAAAAf//////4AAAAAAAAAAAAAB//////8AAAAAAAAAAAAAAP/////+AAAAAAAAAAAAAAB//////AAAAAAAAAAAAAAAP/////gAAAAAAAAAAAAAAB/////wAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAD////+AAAAAAAAAAAAAAAAf////AAAAAAAAAAAAAAAAD////gAAAAAAAAAAAAAAAAf///wAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAA///+AAAAAAAAAAAAAAAAAH///AAAAAAAAAAAAAAAAAA///wAAAAAAAAAAAAAAAAAP//4AAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAf//AAAAAAAAAAAAAAAAAAD//gAAAAAAAAAAAAAAAAAAf/4AAAAAAAAAAAAAAAAAAH/8AAAAAAAAAAAAAAAAAAA//AAAAAAAAAAAAAAAAAAAP/wAAAAAAAAAAAAAAAAAAD/4AAAAAAAAAAAAAAAAAAAf+AAAAAAAAAAAAAAAAAAAH/AAAAAAAAAAAAAAAAAAAA/wAAAAAAAAAAAAAAAAAAAP8AAAAAAAAAAAAAAAAAAAD+AAAAAAAAAAAAAAAAAAAAfgAAAAAAAAAAAAAAAAAAAH4AAAAAAAAAAAAAAAAAAAB8AAAAAAAAAAAAAAAAAAAAPAAAAAAAAAAAAAAAAAAAADwAAAAAAAAAAAAAAAAAAAA8AAAAAAAAAAAAAAAAAAAAPAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAAAAAABwAAAAAAAAAAAAAAAAAAAAcAAAAAAAAAAAAAAAAAAAAPAAAAAAAAAAAAAAAAAAAADwAAAAAAAAAAAAAAAAAAAA8AAAAAAAAAAAAAAAAAAAAPgAAAAAAAAAAAAAAAAAAAH4AAAAAAAAAAAAAAAAAAAB+AAAAAAAAAAAAAAAAAAAAfwAAAAAAAAAAAAAAAAAAAP8AAAAAAAAAAAAAAAAAAAD/AAAAAAAAAAAAAAAAAAAA/4AAAAAAAAAAAAAAAAAAAf+AAAAAAAAAAAAAAAAAAAH/wAAAAAAAAAAAAAAAAAAD/8AAAAAAAAAAAAAAAAAAA//AAAAAAAAAAAAAAAAAAAP/4AAAAAAAAAAAAAAAAAAH/+AAAAAAAAAAAAAAAAAAB//wAAAAAAAAAAAAAAAAAA//+AAAAAAAAAAAAAAAAAAP//gAAAAAAAAAAAAAAAAAH//8AAAAAAAAAAAAAAAAAD///AAAAAAAAAAAAAAAAAA///4AAAAAAAAAAAAAAAAAf///AAAAAAAAAAAAAAAAAP///wAAAAAAAAAAAAAAAAD///+AAAAAAAAAAAAAAAAB////wAAAAAAAAAAAAAAAA////+AAAAAAAAAAAAAAAAf////wAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAD/////gAAAAAAAAAAAAAAB/////8AAAAAAAAAAAAAAA//////gAAAAAAAAAAAAAAf/////8AAAAAAAAAAAAAAP//////gAAAAAAAAAAAAAH//////+AAAAAAAAAAAAAH///////wAAAAAAAAAAAAD///////+AAAAAAAAAAAAB////////wAAAAAAAAAAAA/////////AAAAAAAAAAAA/////////4AAAAAAAAAAAf/////////gAAAAAAAAAAf/////////+AAAAAAAAAAf//////////wAAAAAAAAAP///////////AAAAAAAAAP///////////+AAAAAAAAf////////////4AAAAAAAf/////////////wAAAAAA///////////////gAAAAB////////////////wAAAP/////////////////8AD/////////ygAAABAAAAAgAAAAAEACAAAAAAAABIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////ACilsgCJQWYAJ6sIAKXObwBz8f0AlYnGABBYZQBESxcAYJNbAN/GugA7GEkAXF6sAHLFmQAwzfgAHqdaALWIdgC2/+MADUoCAFJMZwCJTcgAE34rAFSzMgC1YaMATMjRAKu6nwArIh0AgHKQAJ7U+gBzylUAXJyTAGAxOAAlgo0AZcX1AEB5MABiLXwALNCXABYwQwCNlVcA4ezfAAd+AQCKqoEAd5jdALbN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'
    icondata= base64.b64decode(icon_hash)
    ## The temp file is icon.ico
    tempFile= "icon.ico"
    iconfile= open(tempFile,"wb")
    ## Extract the icon
    iconfile.write(icondata)
    iconfile.close()
    root.wm_iconbitmap(tempFile)
    ## Delete the tempfile
    #icon

log_formatter = logging.Formatter('%(asctime)s %(levelname)s %(funcName)s(%(lineno)d) %(message)s')
logFile = 'gui.log'
my_handler = RotatingFileHandler(logFile, mode='a', maxBytes=5*1024*1024, backupCount=2, encoding=None, delay=0)
my_handler.setFormatter(log_formatter)
my_handler.setLevel(logging.INFO)
app_log = logging.getLogger('root')
app_log.setLevel(logging.INFO)
app_log.addHandler(my_handler)

# import keys
key = RSA.importKey(open('privkey.der').read())
public_key = key.publickey()
private_key_readable = str(key.exportKey())
public_key_readable = str(key.publickey().exportKey())
address = hashlib.sha224(public_key_readable).hexdigest()

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#s.settimeout(1)
try:
    s.connect(("127.0.0.1", int("2829"))) #connect to local node
except:
    app_log.info("Cannot connect to local node, please start it first")
    sys.exit(1)
app_log.info("Connected")

def send():
    app_log.info("Received tx command")
    to_address_input = to_address.get()
    app_log.info(to_address_input)
    amount_input = amount.get()
    app_log.info(amount_input)

    timestamp = str(time.time())

    transaction = str(timestamp) +":"+ str(address) +":"+ str(to_address_input) +":"+ str(float(amount_input))
    print transaction

    h = SHA.new(transaction)
    signer = PKCS1_v1_5.new(key)
    signature = signer.sign(h)
    signature_enc = base64.b64encode(signature)
    app_log.info("Client: Encoded Signature: "+str(signature_enc))

    verifier = PKCS1_v1_5.new(key)
    if verifier.verify(h, signature) == True:
        if float(amount_input) < 0:
            app_log.info("Client: Signature OK, but cannot use negative amounts")

        else:
            app_log.info("Client: The signature is valid, proceeding to send transaction, signature, new txhash and the public key")
            s.sendall("transaction")
            time.sleep(0.1)
            transaction_send = (transaction+";"+str(signature_enc)+";"+public_key_readable)

            #announce length
            txhash_len = len(str(transaction_send))
            while len(str(txhash_len)) != 10:
                txhash_len = "0" + str(txhash_len)
            app_log.info("Announcing " + str(txhash_len) + " length of transaction")
            s.sendall(str(txhash_len))
            time.sleep(0.1)
            # announce length

            s.sendall(transaction_send)
            time.sleep(0.1)
            refresh()
    else:
        app_log.info("Client: Invalid signature")
    #enter transaction end

def app_quit():
    app_log.info("Received quit command")
    root.destroy()

def qr():
    address_qr = pyqrcode.create(address)
    address_qr.png('address_qr.png')

    #popup
    top = Toplevel()
    top.wm_iconbitmap(tempFile)
    top.title("Bismuth Address QR Code")

    im = PIL.Image.open("address_qr.png")

    photo = PIL.ImageTk.PhotoImage(im.resize((320, 320)))
    label = Label(top, image=photo)
    label.image = photo  # keep a reference!
    label.pack()

    #msg = Message(top, text="hi")
    #msg.pack()

    button = Button(top, text="Dismiss", command=top.destroy)
    button.pack()
    # popup

#frames
f2 = Frame(root, height=100, width = 100)
f2.grid(row = 0, column = 1, sticky = W+E+S)

f3 = Frame(root, width = 500)
f3.grid(row = 0, column = 0, sticky = W+E+S)

f4 = Frame(root, height=100, width = 100)
f4.grid(row = 1, column = 0, sticky = W+E+N, pady = 10, padx = 10)

f5 = Frame(root, height=100, width = 100)
f5.grid(row = 1, column = 1, sticky = W+E+S)
#frames


def sign():
    def verify_this():
        try:
            received_public_key = RSA.importKey(public_key_gui.get("1.0",END))
            verifier = PKCS1_v1_5.new(received_public_key)
            h = SHA.new(input_text.get("1.0",END))
            received_signature_dec = base64.b64decode(output_signature.get("1.0",END))

            if verifier.verify(h, received_signature_dec) == True:
                top2 = Toplevel()
                top2.title("Validation results")
                msg = Message(top2, text="Signature Valid", width = 50)
                msg.pack()
                button = Button(top2, text="Dismiss", command=top2.destroy)
                button.pack()
            else:
                raise
        except:
            top2 = Toplevel()
            top2.title("Validation results")
            msg = Message(top2, text="Signature Invalid", width = 50)
            msg.pack()
            button = Button(top2, text="Dismiss", command=top2.destroy)
            button.pack()

    def sign_this():
        h = SHA.new(input_text.get("1.0",END))
        signer = PKCS1_v1_5.new(key)
        signature = signer.sign(h)
        signature_enc = base64.b64encode(signature)

        output_signature.delete('1.0', END) #remove previous
        output_signature.insert(INSERT, signature_enc)

    # popup
    top = Toplevel()
    top.title("Sign message")
    #top.geometry("%dx%d%+d%+d" % (800, 600, 0, 0))
    #top.grid_propagate(False)

    Label(top, text="Message:", width=20).grid(row=0, pady=0)
    input_text = Text(top, height=10)
    #label.image = photo  # keep a reference!
    input_text.grid(row=1, column=0, sticky=N+E, padx=15, pady=(0, 0))

    Label(top, text="Public Key:", width=20).grid(row=2, pady=0)
    public_key_gui = Text(top, height=10)
    public_key_gui.insert(INSERT, public_key_readable)
    public_key_gui.grid(row=3, column=0, sticky=N+E, padx=15, pady=(0, 0))

    Label(top, text="Signature:", width=20).grid(row=4, pady=0)
    output_signature = Text(top, height=10)
    output_signature.grid(row=5, column=0, sticky=N+E, padx=15, pady=(0, 0))

    # msg = Message(top, text="hi")
    # msg.pack()

    sign_message = Button(top, text="Sign Message", command=sign_this)
    sign_message.grid(row=6, column=0, sticky=W+E, padx=15, pady=(5, 0))

    sign_message = Button(top, text="Verify Message", command=verify_this)
    sign_message.grid(row=7, column=0, sticky=W+E, padx=15, pady=(15, 0))

    dismiss = Button(top, text="Dismiss", command=top.destroy)
    dismiss.grid(row=8, column=0, sticky=W+E, padx=15, pady=(15, 5))
    # popup


def refresh():
    conn = sqlite3.connect('ledger.db')
    c = conn.cursor()
    c.execute("SELECT sum(amount) FROM transactions WHERE to_address = '" + address + "'")
    credit = c.fetchone()[0]
    c.execute("SELECT sum(amount) FROM transactions WHERE address = '" + address + "'")
    debit = c.fetchone()[0]
    c.execute("SELECT sum(fee) FROM transactions WHERE address = '" + address + "'")
    fees = c.fetchone()[0]
    c.execute("SELECT sum(reward) FROM transactions WHERE address = '" + address + "'")
    rewards = c.fetchone()[0]
    c.execute("SELECT MAX(block_height) FROM transactions")
    bl_height = c.fetchone()[0]
    if debit == None:
        debit = 0
    if fees == None:
        fees = 0
    if rewards == None:
        rewards = 0
    if credit == None:
        credit = 0
    balance = credit - debit - fees + rewards
    app_log.info("Node: Transction address balance: " + str(balance))

    # calculate fee - identical to that in node
    c.execute("SELECT * FROM transactions ORDER BY block_height DESC LIMIT 1;")
    result = c.fetchall()
    db_timestamp_last = result[0][1]
    db_block_height = result[0][0]
    db_block_50 = int(db_block_height) - 50


    try:
        time_now = str(time.time())
        c.execute("SELECT timestamp FROM transactions WHERE block_height ='" + str(db_block_50) + "';")
        db_timestamp_50 = c.fetchone()[0]
        fee = 1000 / (float(time_now) - float(db_timestamp_50))
        app_log.info("Fee: " + str(fee))

    except Exception as e:
        fee = 1  # presumably there are less than 50 txs
        app_log.info("Fee error: " + str(e))
    # calculate fee

    fees_current_var.set("Current Fee: " + str('%f' % (fee)))
    balance_var.set("Balance: " + str(round(balance,2)))
    debit_var.set("Spent Total: " + str(round(debit,2)))
    credit_var.set("Received Total: " + str(round(credit,2)))
    fees_var.set("Fees Paid: " + str(round(fees,5)))
    rewards_var.set("Rewards: " + str(round(rewards, 2)))
    bl_height_var.set("Block Height: " + str(round(bl_height,2)))

    conn.close()
    table()

#buttons

send_b = Button(f5, text="Send Bismuth", command=send, height=1, width=15)
send_b.grid(row=7, column=0, sticky=W+E+S, pady=(100, 4), padx=15)

if "posix" not in os.name:
    start_b = Button(f5, text="Generate QR Code", command=qr, height=1, width=15)
else:
    start_b = Button(f5, text="Generate QR Code", command=qr, height=1, width=15, state=DISABLED)
start_b.grid(row=8, column=0, sticky=W+E+S, pady=4,padx=15,columnspan=4)

balance_b = Button(f5, text="Manual Refresh", command=refresh, height=1, width=15)
balance_b.grid(row=9, column=0, sticky=W+E+S, pady=4,padx=15)

sign_b = Button(f5, text="Sign Message", command=sign, height=1, width=15)
sign_b.grid(row=10, column=0, sticky=W+E+S, pady=4,padx=15)

quit_b = Button(f5, text="Quit", command=app_quit, height=1, width=15)
quit_b.grid(row=11, column=0, sticky=W+E+S, pady=4,padx=15)

#buttons

#refreshables

# update balance label
balance_var = StringVar()
balance_msg = Label(f5, textvariable=balance_var)
balance_msg.grid(row=0, column=0, sticky=N+E, padx=15, pady=(15, 0))

debit_var = StringVar()
spent_msg = Label(f5, textvariable=debit_var)
spent_msg.grid(row=1, column=0, sticky=N+E, padx=15)

credit_var = StringVar()
received_msg = Label(f5, textvariable=credit_var)
received_msg.grid(row=2, column=0, sticky=N+E, padx=15)

fees_var = StringVar()
fees_paid_msg = Label(f5, textvariable=fees_var)
fees_paid_msg.grid(row=3, column=0, sticky=N+E, padx=15)

rewards_var = StringVar()
rewards_paid_msg = Label(f5, textvariable=rewards_var)
rewards_paid_msg.grid(row=4, column=0, sticky=N+E, padx=15)

fees_current_var = StringVar()
fees_to_pay_msg = Label(f5, textvariable=fees_current_var)
fees_to_pay_msg.grid(row=5, column=0, sticky=N+E, padx=15)

bl_height_var = StringVar()
block_height = Label(f5, textvariable=bl_height_var)
block_height.grid(row=6, column=0, sticky=N+E, padx=15)

def table():
    # transaction table
    # data
    datasheet = ["time", "from", "to", "amount"]

    conn = sqlite3.connect('ledger.db')
    c = conn.cursor()
    for row in c.execute("SELECT * FROM transactions WHERE address = '" + str(address) + "' OR to_address = '" + str(address) + "' ORDER BY block_height DESC LIMIT 19;"):
        db_timestamp = row[1]
        datasheet.append(datetime.fromtimestamp(float(db_timestamp)).strftime('%Y-%m-%d %H:%M:%S'))
        db_address = row[2]
        datasheet.append(db_address)
        db_to_address = row[3]
        datasheet.append(db_to_address)
        db_amount = row[4]
        datasheet.append(db_amount)
    conn.close()
    # data

    app_log.info(datasheet)
    app_log.info(len(datasheet))

    if len(datasheet) == 4:
        app_log.info("Looks like a new address")

    elif len(datasheet) < 20 * 4:
        app_log.info(len(datasheet))
        table_limit = len(datasheet) / 4
    else:
        table_limit = 20

    if len(datasheet) > 4:
        k = 0
        for i in range(table_limit):
            for j in range(4):
                e = Entry(f4, justify=RIGHT)
                e.configure(background='floralwhite')
                e.grid(row=i + 1, column=j, sticky=EW)
                e.insert(END, datasheet[k])

                k = k + 1

    # transaction table
    #refreshables

#address and amount
Label(f3, text="Your Address:", width=20).grid(row=0, pady=15)
gui_address = Entry(f3,width=57)
gui_address.grid(row=0,column=1)
gui_address.insert(0,address)
gui_address.configure(state="readonly")

Label(f3, text="Recipient:", width=20).grid(row=1)
Label(f3, text="Amount:", width=20).grid(row=2)

to_address = Entry(f3, width=57)
to_address.grid(row=1, column=1, pady=15)

amount = Entry(f3, width=57)
amount.grid(row=2, column=1, pady=15)
amount.grid(row=2, column=1, pady=15)

balance_enumerator = Entry(f3, width=10)
#address and amount

Label(f4, text="Your latest transactions:", width=20).grid(row=0)

#logo
logo_hash='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'
logo_hash_decoded = base64.b64decode(logo_hash)

logo=PhotoImage(data=logo_hash_decoded)
image = Label(f2, image=logo)
image.grid(pady=5, padx=5)
#logo

refresh()

root.after(2000, refresh)
root.mainloop()
os.remove(tempFile)
